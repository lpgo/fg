//车主
#[derive(PartialEq, Debug, Serialize, Deserialize,Clone)]
pub struct Owner {
    _id:Option<Bson>,
    pub openid: String,
    pub tel:String,
    pub plate_number:String,
    pub car_type : String
}
//乘客
#[derive(PartialEq, Debug, Serialize, Deserialize,Clone)]
pub struct Passenger {
    _id:Option<Bson>,
    pub openid: String,
    pub tel:String
}

#[derive(PartialEq, Debug, Serialize, Deserialize)]
pub struct Seat {
    //_id: Option<Bson>,
    passenger_id: Option<String>,
    pay_id: Option<String>,
    submit : bool
}

#[derive(PartialEq, Debug, Serialize, Deserialize,Default)]
pub struct Trip {
    _id:Option<Bson>,
    pub owner_id: String,
    pub seat_count : u32,
    pub current_seat : u32,
    pub start_time : i64,
    pub start_time_text : String,
    pub line_id:u32,
    pub start:String,
    pub end:String,
    pub price:String,
    pub venue:String,
    pub status:String,
    pub message:Option<String>
}

#[derive(PartialEq, Debug, Serialize, Deserialize)]
pub enum TripStatus {
    Prepare,
    Running,
    Finish
}
#[derive(PartialEq, Debug, Serialize, Deserialize)]
pub struct Line {
     _id:Option<Bson>,
     pub id:u32,
     pub start:String,
     pub end:String,
     pub price:u32,
     pub hot : bool
}

//统一下单返回结果
#[derive(PartialEq, Debug, Serialize, Deserialize)]
pub struct PrePayResult {
    return_code:String,
    return_msg:Option<String>,
    appid:String,
    mch_id:String,
    device_info:Option<String>,
    nonce_str:String,
    sign:String,
    result_code:String,
    err_code:Option<String>,
    err_code_des:Option<String>,
    trade_type:String,
    pub prepay_id:String,
    code_url:Option<String>
}
//weixin api result
#[derive(PartialEq, Debug, Serialize, Deserialize)]
pub struct ApiResult {
    pub access_token: Option<String>,
    pub expires_in:Option<u32>,
    pub errcode:Option<i32>,
    pub errmsg:Option<String>,
    pub refresh_token:Option<String>,
    pub openid:Option<String>,
    pub scope:Option<String>
}

#[derive(PartialEq, Debug, Serialize, Deserialize,Clone)]
pub struct WxUserInfo {
    openid:String,
    nickname: String,
    sex:i32,
    language:String,
    city:String,
    province:String,
    country:String,
    headimgurl: String,
    privilege:Vec<String>,
    unionid:Option<String>
}

#[derive(PartialEq, Debug, Serialize, Deserialize,Clone)]
pub enum UserType {
    Owner,
    Passenger,
    Anonymous
}

impl Default for UserType {
    // add code here
    fn default() -> UserType {
        UserType::Anonymous
    }
}

impl fmt::Display for UserType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            UserType::Owner => write!(f, "Owner"),
            UserType::Passenger => write!(f, "Passenger"),
            UserType::Anonymous => write!(f, "Anonymous")
        }
    }
}

#[derive(PartialEq, Debug, Serialize, Deserialize,Clone,Default)]
pub struct LoginStatus {
    pub user_type : UserType,
    pub openid : String,
    pub name : Option<String>,
    pub web_token : Option<String>,
    pub refresh_token : Option<String>,
    pub passenger:Option<Passenger>,
    pub owner:Option<Owner>,
    pub code:Option<u32>
}

impl Key for LoginStatus {
    type Value = LoginStatus;
}

impl Owner {
    pub fn new(tel:String,car_type:String,plate_number:String,openid:String) -> Owner {
       Owner{_id:None,
                car_type:car_type,
                tel:tel,
                plate_number:plate_number,
                openid:openid}
    }
}

impl Passenger {
    pub fn new(tel:String,openid:String) -> Passenger {
        Passenger{_id:None,tel:tel,openid:openid}
    }
}

impl Seat {
    pub fn new() -> Seat {
        Seat{passenger_id:None,pay_id:None,submit:false}
    }
}

impl TripStatus {
    pub fn to_string(&self) -> String {
        match *self {
            TripStatus::Prepare => "Prepare".to_string(),
            TripStatus::Running => "Running".to_string(),
            TripStatus::Finish => "Finish".to_string()
        }
    }
}

    